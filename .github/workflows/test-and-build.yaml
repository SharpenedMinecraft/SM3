name: Test and build

on:
  push:
    branches:
      - dev
      - master
    tags:
      - 'v*'

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runtime: [ "win-x64", "win-x86", "linux-x64", "osx-x64" ]

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.100
    - name: Build with dotnet
      run: dotnet publish -r ${{ matrix.runtime }} -c Release /p:PublishSingleFile=true -o ./output/
      working-directory: ./Frontend/
    - name: Zip artifacts
      run: zip --junk-paths -r ./artifact.zip ./Frontend/output/
    - uses: actions/upload-artifact@v1
      with:
        name: SM3-${{ matrix.runtime }}.zip
        path: ./artifact.zip

  test:
    name: docker-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Build Docker Image
        run: docker build --target test -t test:latest -f ./Frontend/Dockerfile .
      - name: Run Tests
        run: docker run test:latest

  docker-build:
    name: docker-build
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:
      - uses: actions/checkout@v1
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: sharpenedminecraft/sm3/frontend
          username: ${{ github.actor }}
          password: ${{ github.token }}
          registry: docker.pkg.github.com
          dockerfile: ./Frontend/Dockerfile

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [ docker-build ]

    steps:
    - name: Extract branch name
      shell: bash
      run: echo "::set-env name=NAMESPACE::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
      id: extract_branch

    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url:  docker.pkg.github.com
        container-registry-username: ${{ secrets.GITHUB_PACKAGES_USERNAME }}
        container-registry-password: ${{ secrets.GITHUB_PACKAGES_PASSWORD }}
        secret-name: github-registry-connection
        namespace: ${{ env.NAMESPACE }}

    - uses: actions/checkout@v1

    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          ./Frontend/manifests/deployment.yaml
          ./Frontend/manifests/service.yaml
        images: |
          docker.pkg.github.com/sharpenedminecraft/sm3/frontend:${{ env.NAMESPACE }}
        namespace: ${{ env.NAMESPACE }}
        imagepullsecrets: |
          github-registry-connection



env:
  CLUSTER_NAME: SM3
  CLUSTER_RESOURCE_GROUP: SM3